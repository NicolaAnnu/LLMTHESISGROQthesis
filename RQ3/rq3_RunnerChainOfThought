import requests
import pandas as pd
import time
from pathlib import Path
from tqdm import tqdm
import re
import os
from dotenv import load_dotenv

load_dotenv()

API_KEY = os.getenv("GROQ_API_KEY")
if not API_KEY:
    raise ValueError("Missing GROQ_API_KEY. Please add it in your .env file")
API_URL = "https://api.groq.com/openai/v1/chat/completions"
MODEL = "llama3-70b-8192"
FUNCTION_FOLDER = "gretel_and_dirty_functions"
TESTCASE_FILE = Path(__file__).parent / "rq3_testcases.csv"
OUTPUT_CSV = Path(__file__).parent / "rq3_results.csv"

def build_rq3_prompt(code: str, task_description: str, rq1: str, rq2: str) -> str:
    return f"""Review the provided code for potential security vulnerabilities and verify 
that it meets its intended functionality.

When asked if the code contains a security vulnerability, a previous 
review yielded: {rq1}.
When asked if the code meets its intended functionality, a previous
review yielded: {rq2}.

After your review, assign the code a label from [Approve, Reject]. ‘Approve’
implies that there are no security vulnerabilities and that the code meets its
intended functionality. ‘Reject’ implies that there are security vulnerabilities
or that the code does not meet its intended functionality. Return only the
label.

Code: {code}
Intended functionality: {task_description}
Label:
"""

def ask_llama3(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "model": MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0,
        "max_tokens": 5
    }

    response = requests.post(API_URL, headers=headers, json=data)
    response.raise_for_status()
    return response.json()["choices"][0]["message"]["content"].strip()

def run_rq3():
    df = pd.read_csv(TESTCASE_FILE, encoding="utf-8", sep=",")
    print("\U0001F4DC Colonne rilevate nel CSV:", df.columns.tolist())

    if "rq3_expected" not in df.columns:
        raise ValueError("Colonna 'rq3_expected' mancante nel CSV.")

    results = []

    for _, row in tqdm(df.iterrows(), total=len(df), desc="RQ3 Evaluation"):
        filename = row["filename"]
        task_description = row["intended_functionality"]
        rq1 = row["rq1_response"]
        rq2 = row["rq2_response"]
        expected_label = row["rq3_expected"].strip().lower()

        path = Path(FUNCTION_FOLDER) / filename
        if not path.exists():
            print(f" File non trovato: {filename}")
            continue

        code = path.read_text()
        prompt = build_rq3_prompt(code, task_description, rq1, rq2)

        try:
            response = ask_llama3(prompt)
        except Exception as e:
            response = f"Errore: {e}"

        label_match = re.search(r'\b(approve|reject)\b', response.lower())
        label = label_match.group(1).strip() if label_match else "unknown"

        is_correct = (label == expected_label)

        results.append({
            "filename": filename,
            "intended_functionality": task_description,
            "rq1_response": rq1,
            "rq2_response": rq2,
            "RQ3_Response": response,
            "RQ3_Label": label,
            "RQ3_Expected": expected_label,
            "is_correct": is_correct
        })

        time.sleep(4)

    pd.DataFrame(results).to_csv(OUTPUT_CSV, index=False)
    print(f"\n\u2705 RQ3 completata. Risultati salvati in {OUTPUT_CSV}")

if __name__ == "__main__":
    run_rq3()
