import requests
import pandas as pd
import time
from pathlib import Path
from tqdm import tqdm
import os
from dotenv import load_dotenv

load_dotenv()

API_KEY = os.getenv("GROQ_API_KEY")
if not API_KEY:
    raise ValueError("Missing GROQ_API_KEY. Please add it in your .env file")
API_URL = "https://api.groq.com/openai/v1/chat/completions"
MODEL = "llama3-70b-8192"
FUNCTION_FOLDER = "gretel_and_dirty_functions"
TESTCASE_FILE = Path(__file__).parent / "rq2_testcases.csv"
OUTPUT_CSV = Path(__file__).parent / "rq2_resultsOneShot.csv"

# One-shot
def build_rq2_prompt(code: str, intended_functionality: str) -> str:
    return f"""Review the provided code and determine whether it correctly implements the described functionality.

Your task is to focus **only** on whether the behavior of the code matches the intended functionality,
 regardless of whether the code contains bugs, security vulnerabilities, or bad practices.
Assign one label from [Yes, No].
‘Yes’ implies the code matches the described behavior.
‘No’ implies the code does not match the described behavior.
Return only the label.

Code:
{code}

Intended functionality:
{intended_functionality}

Label:"""

def ask_llama3(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "model": MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0,
        "max_tokens": 20
    }

    response = requests.post(API_URL, headers=headers, json=data)
    response.raise_for_status()
    return response.json()["choices"][0]["message"]["content"].strip()

# === MAIN ===
def run_rq2():
    df = pd.read_csv(TESTCASE_FILE, encoding="utf-8", sep=",")
    print(" Colonne rilevate nel CSV:", df.columns.tolist())
    print(df.head())

    results = []

    for _, row in tqdm(df.iterrows(), total=len(df), desc="RQ2 Evaluation"):
        filename = row["filename"]
        intended_functionality = row["intended_functionality"]

        path = Path(FUNCTION_FOLDER) / filename
        if not path.exists():
            print(f" File non trovato: {filename}")
            continue

        code = path.read_text()
        prompt = build_rq2_prompt(code, intended_functionality)

        try:
            response = ask_llama3(prompt)
        except Exception as e:
            response = f"Errore: {e}"

        results.append({
            "filename": filename,
            "intended_functionality": intended_functionality,
            "RQ2_Response": response
        })

        time.sleep(4)

    df_result = pd.DataFrame(results)
    df_result["is_correct"] = df_result["RQ2_Response"].str.strip().str.lower() == "yes"
    df_result.to_csv(OUTPUT_CSV, index=False)
    print(f"\n RQ2 completata. Risultati salvati in {OUTPUT_CSV}")


if __name__ == "__main__":
    run_rq2()
